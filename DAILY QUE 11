2025-10-07 | Count Inversions in an Array

Problem Statement

Given an array arr[] of integers, find the total number of inversions in the array.
An inversion occurs when a larger element appears before a smaller one in the sequence.

Return the total count as a long long integer.

Approach / Explanation
	1.	Divide and Conquer via Merge Sort
	•	Split the array recursively into two halves.
	•	Count inversions in the left half, right half, and between halves.
	2.	Counting Inversions During Merge
	•	During merging, when an element from the right half is smaller than an element from the left half,
all remaining elements in the left half are greater — contributing to the inversion count.
	•	For each such instance, increment count by (mid - i + 1) where i is the current index in the left subarray.
	3.	Combine Results
	•	The total inversion count = inversions in left + inversions in right + cross inversions.

This ensures the array gets sorted as a side effect while counting inversions efficiently.

SOLUTION:
class Solution {
  public:
    long long merge(vector<int> &arr, int left, int mid, int right) {
        vector<int> temp;
        int i = left, j = mid + 1;
        long long inv = 0;

        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp.push_back(arr[i++]);
            } else {
                temp.push_back(arr[j++]);
                inv += (mid - i + 1); // all remaining elements in left are greater
            }
        }

        while (i <= mid) temp.push_back(arr[i++]);
        while (j <= right) temp.push_back(arr[j++]);

        for (int k = left; k <= right; k++)
            arr[k] = temp[k - left];

        return inv;
    }

    long long mergeSort(vector<int> &arr, int left, int right) {
        if (left >= right) return 0;
        int mid = left + (right - left) / 2;
        long long inv = 0;
        inv += mergeSort(arr, left, mid);
        inv += mergeSort(arr, mid + 1, right);
        inv += merge(arr, left, mid, right);
        return inv;
    }

    long long inversionCount(vector<int> &arr) {
        return mergeSort(arr, 0, arr.size() - 1);
    }
};
