2025-10-06 | Knight’s Tour Problem

Problem Statement

Given an integer n, determine a valid Knight’s Tour on an n × n chessboard starting from (0, 0) such that:
	•	The Knight visits every square exactly once.
	•	Each move follows standard Knight movement rules.
	•	Return the board with numbers indicating the move order starting from 0.
	•	Return an empty board if no tour exists.

Approach / Explanation
	1.	Backtracking / DFS
	•	Start at (0, 0) with step 0.
	•	Try all 8 possible Knight moves recursively.
	2.	Safety Check
	•	Only move to positions that are within the board and unvisited.
	3.	Base Case
	•	If the step count equals n * n, all squares are visited; return true.
	4.	Backtracking
	•	If a move does not lead to a solution, undo the move (mark the square as unvisited) and try the next move.
	5.	Result
	•	Return the board with the step sequence if a solution is found.
	•	Otherwise, return an empty board.

SOLUTION:
class Solution {
public:
    bool isSafe(int x, int y, int n, vector<vector<int>> &board) {
        return (x >= 0 && y >= 0 && x < n && y < n && board[x][y] == -1);
    }

    bool solveKnightTour(int x, int y, int step, int n, 
                         vector<vector<int>> &board, 
                         const vector<int> &dx, 
                         const vector<int> &dy) {
        // All squares visited
        if (step == n * n) return true;

        for (int move = 0; move < 8; move++) {
            int nx = x + dx[move];
            int ny = y + dy[move];

            if (isSafe(nx, ny, n, board)) {
                board[nx][ny] = step;

                if (solveKnightTour(nx, ny, step + 1, n, board, dx, dy))
                    return true;

                // Backtrack
                board[nx][ny] = -1;
            }
        }
        return false;
    }

    vector<vector<int>> knightTour(int n) {
        vector<vector<int>> board(n, vector<int>(n, -1));

        const vector<int> dx = {2, 1, -1, -2, -2, -1, 1, 2};
        const vector<int> dy = {1, 2, 2, 1, -1, -2, -2, -1};

        board[0][0] = 0;

        if (solveKnightTour(0, 0, 1, n, board, dx, dy))
            return board;

        return {};
    }
};
