2025-10-31 | Remove Nodes Present in Array from Linked List

Problem Statement
You are given an array of integers nums and the head of a linked list.
You need to remove all nodes from the linked list whose values appear in nums.

Return the head of the modified linked list after all such removals.

Approach / Explanation
	1.	Observation
•	We can efficiently check if a node’s value should be removed by storing all elements of nums in a hash set (for O(1) lookups).
•	Then, traverse the linked list and skip over any node whose value exists in that set.
	2.	Steps
•	Insert all values from nums into an unordered_set for quick lookups.
•	Use a dummy node before the head to simplify deletion operations.
•	Iterate through the list:
	•	If the current node’s value is in the set, unlink it.
	•	Otherwise, move forward.
•	Return dummy->next as the new head.
	3.	Time and Space Complexity
•	Time Complexity: O(n + m) — n for linked list traversal, m for set construction.
•	Space Complexity: O(m) — extra space for the hash set.

SOLUTION:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* modifiedList(vector<int>& nums, ListNode* head) {
        unordered_set<int> st(nums.begin(), nums.end());
        ListNode* dummy = new ListNode(0);
        dummy->next = head;

        ListNode* prev = dummy;
        ListNode* curr = head;

        while (curr) {
            if (st.find(curr->val) != st.end()) {
                // Remove current node
                prev->next = curr->next;
            } else {
                prev = curr;
            }
            curr = curr->next;
        }

        return dummy->next;
    }
};
