2025-10-30 | Replace Surrounded Regions in Grid

Question
Given an n x m matrix grid[][] of 'O' and 'X', replace all 'O' that are surrounded by ‘X’ (in all 4 directions) with 'X'.
Return the modified grid.

Approach
	1.	Observation:
The only 'O' cells that should not be converted to 'X' are those that are:
	•	On the boundary, or
	•	Connected to a boundary 'O'.
	2.	Idea:
	•	Start from all 'O' cells on the boundary and perform DFS/BFS to mark all 'O's connected to them as safe (say, temporarily mark them as '#').
	•	After marking:
	•	Convert all remaining 'O' to 'X' (these are surrounded).
	•	Convert all '#' back to 'O'.
	3.	Steps:
	•	Traverse the first and last row, and first and last column — run DFS/BFS for any 'O' found.
	•	After marking, update the grid as described.

SOLUTION:
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    void dfs(int i, int j, vector<vector<char>>& grid, int n, int m) {
        if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] != 'O')
            return;

        grid[i][j] = '#';  // mark as safe

        // explore 4 directions
        dfs(i + 1, j, grid, n, m);
        dfs(i - 1, j, grid, n, m);
        dfs(i, j + 1, grid, n, m);
        dfs(i, j - 1, grid, n, m);
    }

    vector<vector<char>> fill(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        // Step 1: Mark boundary-connected 'O's
        for (int i = 0; i < n; i++) {
            if (grid[i][0] == 'O') dfs(i, 0, grid, n, m);
            if (grid[i][m - 1] == 'O') dfs(i, m - 1, grid, n, m);
        }
        for (int j = 0; j < m; j++) {
            if (grid[0][j] == 'O') dfs(0, j, grid, n, m);
            if (grid[n - 1][j] == 'O') dfs(n - 1, j, grid, n, m);
        }

        // Step 2: Replace surrounded 'O' -> 'X', and restore safe ones '# -> O'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 'O') grid[i][j] = 'X';
                else if (grid[i][j] == '#') grid[i][j] = 'O';
            }
        }

        return grid;
    }
};

int main() {
    vector<vector<char>> grid = {
        {'X', 'X', 'X', 'X'},
        {'X', 'O', 'O', 'X'},
        {'X', 'X', 'O', 'X'},
        {'X', 'O', 'X', 'X'}
    };

    Solution obj;
    auto result = obj.fill(grid);

    for (auto row : result) {
        for (auto cell : row)
            cout << cell << " ";
        cout << endl;
    }

    return 0;
}
