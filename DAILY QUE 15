2025-09-26 | Top K Maximum Sum Combinations

Approach
	1.	Sorting for Maximum Values
	•	Sort both arrays a and b in descending order so that the largest possible combinations appear early.
	2.	Using a Max Heap
	•	A max heap (priority queue) stores tuples of {sum, {i, j}}, representing the sum of a[i] + b[j].
	•	Start by pushing the largest pair (a[0], b[0]).
	3.	Tracking Visited Pairs
	•	Use a set to store pairs (i, j) that are already pushed into the heap to avoid duplicates.
	4.	Generating Next Candidates
	•	For every popped element (i, j), push the next two possible pairs:
	•	(i + 1, j) → move to the next element in a
	•	(i, j + 1) → move to the next element in b
	•	Each represents the next highest sum combination possible.
	5.	Repeat Until K Elements Found
	•	Continue popping from the heap until we collect k largest sums.

This ensures that we only explore the most promising combinations first, keeping the time complexity efficient at O(k log k).

SOLUTION:
class Solution {
  public:
    vector<int> topKSumPairs(vector<int>& a, vector<int>& b, int k) {
        int n = a.size();
        sort(a.begin(), a.end(), greater<int>());
        sort(b.begin(), b.end(), greater<int>());
        
        // Max heap: {sum, {i, j}}
        priority_queue<pair<int, pair<int, int>>> pq;
        set<pair<int, int>> visited;
        
        pq.push({a[0] + b[0], {0, 0}});
        visited.insert({0, 0});
        
        vector<int> result;
        
        while (k-- && !pq.empty()) {
            auto top = pq.top(); pq.pop();
            int sum = top.first;
            int i = top.second.first;
            int j = top.second.second;
            
            result.push_back(sum);
            
            // Next pair (i+1, j)
            if (i + 1 < n && !visited.count({i + 1, j})) {
                pq.push({a[i + 1] + b[j], {i + 1, j}});
                visited.insert({i + 1, j});
            }
            
            // Next pair (i, j+1)
            if (j + 1 < n && !visited.count({i, j + 1})) {
                pq.push({a[i] + b[j + 1], {i, j + 1}});
                visited.insert({i, j + 1});
            }
        }
        
        return result;
    }
};
