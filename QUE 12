You are given a 2D binary matrix mat[][], where each cell contains either 0 or 1. Your task is to find the maximum area of a rectangle that can be formed using only 1's within the matrix.

This problem is a classic variation of the Largest Rectangle in Histogram problem applied row by row in a matrix.Each row of the matrix can be treated like a histogram where the ‚Äúheight‚Äù represents consecutive 1‚Äôs stacked vertically. By calculating the largest rectangle in each histogram row and keeping track of the maximum, we find the largest rectangle of 1‚Äôs in the whole matrix.

üí° Approach:
	1.	Transform rows into histograms:
	For each row, update heights for every column.
	If matrix[r][c] == 0, reset height to 0.
	If matrix[r][c] == 1, increase height by 1.
	2.	Apply Largest Histogram Rectangle Algorithm:
	Use a stack to efficiently compute the largest rectangle for the histogram of each row.
	For every bar, pop higher bars and calculate area using current index as the right boundary.
	3.	Track the maximum area:
	Compute rectangle area row by row.
	Return the maximum found.

SOLUTION:
class Solution {
public:
    // Function to compute largest rectangle in a histogram
    int largestHistogramArea(const vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        int maxArea = 0;

        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                int height = heights[st.top()];
                st.pop();

                int width = st.empty() ? i : (i - st.top() - 1);
                maxArea = max(maxArea, height * width);
            }
            st.push(i);
        }

        // Handle remaining bars in stack
        while (!st.empty()) {
            int height = heights[st.top()];
            st.pop();

            int width = st.empty() ? n : (n - st.top() - 1);
            maxArea = max(maxArea, height * width);
        }

        return maxArea;
    }

    // Function to compute largest rectangle of 1s in a binary matrix
    int maxArea(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();

        vector<int> heights(cols, 0);
        int result = 0;

        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                heights[c] = (matrix[r][c] == 0) ? 0 : heights[c] + 1;
            }
            result = max(result, largestHistogramArea(heights));
        }

        return result;
    }
};
