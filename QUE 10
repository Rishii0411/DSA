2025-09-20 | String Stack Construction

QUESTION:
You are given two strings pat and tar consisting of lowercase English characters. You can construct a new string s by performing any one of the following operations for each character in pat:
	1.	Append the character pat[i] to the string s.
	2.	Delete the last character of s (if s is empty, do nothing).

After performing operations on every character of pat exactly once, your goal is to determine if it is possible to make the string s equal to string tar.

⸻

APPROACH:
The solution can be visualized as simulating a stack:
	1.	Start comparing characters of pat and tar from the end.
	2.	If characters match, move one step left in both strings.
	3.	If they don’t match, skip one extra character from pat (this simulates a delete operation).
	4.	Continue until either all of tar is matched or pat is exhausted.
	5.	If all of tar is matched (j < 0), then the transformation is possible.

This greedy approach works because deletions only help when characters don’t align, so skipping mismatches ensures correctness.

⸻

SOLUTION:
class Solution {
  public:
    bool stringStack(string &pat, string &tar) {
        int j = tar.length() - 1;
        for (int i = pat.length() - 1; i >= 0; i--) {
            if (j >= 0 && pat[i] == tar[j]) {
                j--;
            } 
            else if (j >= 0 && pat[i] != tar[j]) {
                i -= 1; // simulate deletion
            }
        }
        return (j < 0);
    }
};
