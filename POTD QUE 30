2025-10-03 | Generate Possible Words from Keypad Digits

Problem Statement

You are given a keypad (as shown in the diagram) and an array arr[] containing digits. Your task is to list all possible words in any order that can be generated by pressing numbers in arr[] sequentially.
	•	Digits 2–9 map to letters.
	•	Digits 0 and 1 do not map to letters.
	•	The output can be in any order, but the driver code will print them in sorted order.

Approach / Explanation
	1.	Mapping Digits to Letters
	•	A vector stores mappings for digits 0–9 (e.g., 2 -> "abc", 3 -> "def", etc.).
	2.	Backtracking Function
	•	Recursively build words by choosing one character for the current digit, moving to the next digit, and backtracking to try other options.
	3.	Handling Digits 0 and 1
	•	These are skipped since they have no mappings.
	4.	Base Case
	•	If the current index reaches the end of the digit array, store the current word in the result.

SOLUTION:
class Solution {
  public:
    void backtrack(int index, vector<int> &arr, vector<string> &alp,
                   string &curr, vector<string> &ans) {
        // if we processed all digits
        if (index == arr.size()) {
            if (!curr.empty()) ans.push_back(curr);
            return;
        }

        int digit = arr[index];
        if (digit == 0 || digit == 1) {
            // skip and move to next digit
            backtrack(index + 1, arr, alp, curr, ans);
            return;
        }

        for (char c : alp[digit]) {
            curr.push_back(c);                          
            backtrack(index + 1, arr, alp, curr, ans);  
            curr.pop_back();                            
        }
    }

    vector<string> possibleWords(vector<int> &arr) {
        vector<string> ans;
        vector<string> alp = {
            "", "", "abc", "def", "ghi", 
            "jkl", "mno", "pqrs", "tuv", "wxyz"
        };

        string curr;
        backtrack(0, arr, alp, curr, ans);
        return ans;
    }
};
