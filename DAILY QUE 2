2025-09-24 | Sort an Array of 0s, 1s, and 2s

Question

Given an array arr[] containing only 0s, 1s, and 2s, sort the array in ascending order.
	•	You cannot use built-in sorting functions.
	•	The goal is to rearrange the array in-place efficiently.

Approach
	1.	Use Three Pointers
	•	low → Tracks position for next 0.
	•	mid → Current element under consideration.
	•	high → Tracks position for next 2.
	2.	Traverse the Array
	•	While mid <= high:
	•	If arr[mid] == 0, swap it with arr[low] and increment both low and mid.
	•	If arr[mid] == 1, just move mid forward.
	•	If arr[mid] == 2, swap it with arr[high] and decrement high (do not increment mid here).
	3.	This ensures that:
	•	All 0s are moved to the beginning.
	•	All 2s are moved to the end.
	•	All 1s naturally remain in the middle.

This approach sorts the array in a single pass with constant extra space.

SOLUTION:
class Solution {
  public:
    void sort012(vector<int>& arr) {
        int low = 0, mid = 0;
        int high = arr.size() - 1;

        while (mid <= high) {
            if (arr[mid] == 0) {
                swap(arr[low], arr[mid]);
                low++;
                mid++;
            } else if (arr[mid] == 1) {
                mid++;
            } else { // arr[mid] == 2
                swap(arr[mid], arr[high]);
                high--;
            }
        }
    }
};
