2025-10-31 | Shortest Cycle in an Undirected Graph

Problem Statement
You are given an undirected graph with V vertices numbered from 0 to V - 1 and E edges, represented as a 2D array edges[][], where each element edges[i] = [u, v] represents an undirected edge between vertex u and vertex v.
Your task is to find the length of the shortest cycle in the graph.
If the graph does not contain any cycle, return -1.
Note:
A cycle is a path that starts and ends at the same vertex without repeating any edge or vertex (except the start/end vertex).
The shortest cycle is the one with the minimum number of edges.

Approach / Explanation
	1.	Observation
•	A cycle can be detected using BFS.
•	While performing BFS from a node, if we encounter an already visited vertex that is not the parent, a cycle exists.
•	The distance between these two vertices gives the cycle length.
	2.	BFS Approach for Shortest Cycle
•	Run BFS from every vertex (since the graph can be disconnected).
•	For each vertex i, perform BFS while keeping track of the parent of each node and the distance from the start node.
•	If a visited neighbor is found that is not the parent, compute the potential cycle length as dist[curr] + dist[neighbor] + 1.
•	Update the shortest cycle length accordingly.
	3.	Time and Space Complexity
•	Time Complexity: O(V * (V + E)) — BFS from each vertex.
•	Space Complexity: O(V + E) — adjacency list and auxiliary arrays.

SOLUTION:
class Solution {
public:
    int shortestCycle(int V, vector<vector<int>>& edges) {
        vector<vector<int>> adj(V);
        
        // Build adjacency list
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        
        int ans = INT_MAX;

        // Run BFS from every vertex
        for (int i = 0; i < V; i++) {
            vector<int> dist(V, -1);
            vector<int> parent(V, -1);
            queue<int> q;
            
            dist[i] = 0;
            q.push(i);
            
            while (!q.empty()) {
                int node = q.front();
                q.pop();
                
                for (int nbr : adj[node]) {
                    if (dist[nbr] == -1) {
                        dist[nbr] = dist[node] + 1;
                        parent[nbr] = node;
                        q.push(nbr);
                    } else if (parent[node] != nbr) {
                        // Cycle found
                        ans = min(ans, dist[node] + dist[nbr] + 1);
                    }
                }
            }
        }

        return (ans == INT_MAX) ? -1 : ans;
    }
};
