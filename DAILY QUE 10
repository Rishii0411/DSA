2025-10-06 | Longest Subarray with At Most Two Distinct Integers


Problem Statement

Given an array arr[] of positive integers, find the length of the longest contiguous subarray that contains at most two distinct integers.
	•	Return the maximum length of such a subarray.
	•	The array can contain any positive integers.


Approach / Explanation
	1.	Sliding Window Technique
	•	Maintain a window [start, end] that represents the current subarray.
	•	Expand the window by moving end forward.
	2.	Tracking Frequency
	•	Use an unordered_map to track the frequency of each integer in the current window.
	•	The size of the map indicates the number of distinct integers in the window.
	3.	Shrink Window
	•	If the map size exceeds 2, move start forward to remove elements until there are at most 2 distinct integers.
	•	Decrease the frequency of removed elements and erase them from the map if their frequency becomes 0.
	4.	Update Maximum Length
	•	After each expansion, calculate end - start + 1 and update the maximum length.
	5.	Result
	•	Return the maximum length found after processing the entire array.

SOLUTION:
class Solution {
public:
    int totalElements(vector<int> &arr) {
        unordered_map<int, int> freq;
        int start = 0, maxLen = 0;

        for (int end = 0; end < arr.size(); end++) {
            freq[arr[end]]++;

            // Shrink window if more than 2 distinct integers
            while (freq.size() > 2) {
                freq[arr[start]]--;
                if (freq[arr[start]] == 0)
                    freq.erase(arr[start]);
                start++;
            }

            maxLen = max(maxLen, end - start + 1);
        }

        return maxLen;
    }
};
