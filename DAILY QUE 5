2025-09-27 | Minimize the Maximum Difference Between Tower Heights


Question

You are given an array arr[] representing the heights of n towers and an integer k. 
For each tower, you must either increase or decrease its height by k exactly once.

Your task is to find the minimum possible difference between the height of the tallest and the shortest towers after performing the modifications.


Approach
	1.	Sort the Array
	•	Sorting makes it easier to compare adjacent elements and reason about minimum/maximum heights.
	2.	Initial Difference
	•	Start with the difference between the tallest and shortest tower without any modification: arr[n-1] - arr[0].
	3.	Adjust Boundaries
	•	After modification:
	•	The shortest tower could be increased by k.
	•	The tallest tower could be decreased by k.
	•	So we initially assume:
	•	minTower = arr[0] + k
	•	maxTower = arr[n-1] - k
	4.	Iterate and Update
	•	For each partition in the sorted array, consider:
	•	currMin = min(minTower, arr[i+1] - k)
	•	currMax = max(maxTower, arr[i] + k)
	•	Skip if currMin < 0 because heights can’t be negative.
	•	Update the answer as the minimum difference found so far.
	5.	Return Result
	•	Return the minimum difference after processing all possibilities.

This greedy strategy ensures we balance the skyline by pushing up the smaller towers and pulling down the larger ones.


SOLUTION:
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int getMinDiff(vector<int>& arr, int k) {
        int n = arr.size();
        if (n == 1) return 0;

        sort(arr.begin(), arr.end());

        int diff = arr[n - 1] - arr[0];  
        int minTower = arr[0] + k;
        int maxTower = arr[n - 1] - k;

        for (int i = 0; i < n - 1; i++) {
            int currMin = min(minTower, arr[i + 1] - k);
            int currMax = max(maxTower, arr[i] + k);

            if (currMin < 0) continue; 
            diff = min(diff, currMax - currMin);
        }

        return diff;
    }
};
