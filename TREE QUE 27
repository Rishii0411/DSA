October 22, 2025 | Maximum Depth of Binary Tree
104. Maximum Depth of Binary Tree

Question:
Given the root of a binary tree, return its maximum depth.
A binary tree’s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Approach:
	1.	Recursive Traversal:
	•	The idea is to traverse the tree recursively while maintaining a height counter to represent the current depth.
	2.	Increment Height on Each Node:
	•	Each time we move down to a child node, we increment the height by 1.
	•	When we reach a leaf node, the height represents the depth of that path.
	3.	Track the Maximum Depth:
	•	During traversal, we continuously update ans with the maximum height reached so far.
	4.	Return Result:
	•	After the traversal completes, ans holds the maximum depth of the tree.

Complexity Analysis:
	•	Time Complexity: O(n), since every node is visited once.
	•	Space Complexity: O(h), where h is the height of the tree (recursion stack space).

This recursive approach elegantly finds the longest root-to-leaf path by tracking depth during traversal

SOLUTION;

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:

    void inorder(TreeNode* root, int height, int &ans)
    {
        if(!root)
        {
            return;
        }
        height++;
        inorder(root->left, height, ans);
        ans = max(ans, height);
        inorder(root->right, height, ans);
    }

    int maxDepth(TreeNode* root) {
        int ans = 0;
        inorder(root, 0, ans);
        return ans;
    }
};
