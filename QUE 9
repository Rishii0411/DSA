2025-09-20 | Gas Station Circular Tour

QUESTION:
There are n gas stations along a circular tour. You are given two integer arrays gas[] and cost[], where gas[i] is the amount of gas available at station i and cost[i] is the gas needed to travel from station i to station (i+1). You have a car with an unlimited gas tank and start with an empty tank at some station. Your task is to return the index of the starting station if it is possible to travel once around the circular route in a clockwise direction without running out of gas at any station; otherwise, return -1.

Note: If a solution exists, it is guaranteed to be unique.

⸻

APPROACH:
The solution relies on greedy observation:
	1.	Keep two variables:
	•	total → the net gas balance for the entire trip.
	•	curr → the current gas balance while traversing.
	2.	Traverse each station:
	•	Add (gas[i] - cost[i]) to both curr and total.
	•	If curr becomes negative, it means we cannot start from the current or any previous station.
	•	Reset curr to 0.
	•	Set the next index (i+1) as the new tentative starting station.
	3.	After the full traversal:
	•	If total < 0, there is not enough gas overall, so return -1.
	•	Otherwise, the last updated start index is the valid solution.

This works in O(n) time with constant space, since each station is visited only once.

⸻

SOLUTION:
class Solution {
  public:
    int startStation(vector<int> &gas, vector<int> &cost) {
        int total = 0;
        int curr = 0;
        int start = 0;

        for (int i = 0; i < gas.size(); i++) {
            curr += gas[i] - cost[i];
            total += gas[i] - cost[i];

            if (curr < 0) {
                curr = 0;
                start = i + 1;  // reset starting point
            }
        }

        if (total < 0) {
            return -1;
        }
        return start;
    }
};
